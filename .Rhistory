find.packge("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
help plot
help
plot
x<- 1:10
if(x>5) {}
if(x>5) {x<-0 }
cube <- function (x,n) { x^3 }
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f
z<- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
foo <- matrix(1:6, 3, 2)
foo
bar <- matrix(1:4, 2, 2)
bar
x <- matrix(rnorm(10), 20,10)
x
x <- matrix(rnorm(200), 20, 10)
x
x <- matrix (rnorm(200), 4, 3)
x <- matrix(rnorm(24), 4, 3)
x
apply(x, 1, mean)
x <- matrix(rnorm(12), 4, 3)
x
x <- matrix (1:12, 4, 3)
x
apply(x, 2, mean)
apply(x, 1, mean)
apply(x, 3, mean)
x <- matrix(rnorm(12), 4, 3)
x
x <- matrix(1:12, 4, 3)
x
apply(x, 1, quartile, probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
library(datasets)
data(iris)
?iris
iris
split(iris,"Species")
foo <- split(iris, "Species")
foo
split(iris, iris$Species)
foo <- split(iris, iris$Species)
foo
foo$virginica
?colMean
help colMean
?colMeans
colMeans(foo$virginica)
class(foo)
lapply(foo, function(x) colMeans(x[, "virginica"])))
lapply(foo, function(x) colMeans(x[, "virginica"]))
lapply(foo, function(x) colMeans(x[, "Sepal.Length"]))
lapply(foo, function(x) colMeans(x[, c("Sepal.Length"])))
sapply(foo, function(x) colMeans(x[, "Sepal.Length"]))
str(foo)
class foo
class(foo)
class(foo$virginica)
dframe <- foo$virginica
dframe
dframe
foo
iris
data(iris)
?iris
iris
library(datasets)
data(iris)
iris
iris
irisSplit <- split(iris, iris$Species)
class(irisSplit)
irisSplit
irisSplit$virginica
vOnly <- irisSplit$virginica
vOnly
colMeans(vOnly, vOnly4$Sepal.Length)
colMeans(vOnly, vOnly$Sepal.Length)
?colMeans
colMeans(vOnly$Sepal.Length)
?mean
mean(vOnly$Sepal.Length)
iris
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2,mean)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl),mean)
byCylinder split(mtcars, mtcars$cyl)
byCylinder <- split(mtcars, mtcar$cyl)
byCylinder <- split(mtcars, mtcars$cyl)
byCylinder
4cyl <- byCylinder$4
4cyl <- byCylinder$'4'
byCylinder$'4'
class(byCylinder)
length(byCylinder)
4cyl <- byCylinder$'4'
byCylinder$'4'
class(byCylinder$'4')
mean(byCylinder$'4'[, 1]
mean(byCylinder$'4'[, 2]
byCylinder$'4'[, 1]
?mean
class(byCylinder$'4'[, 1])
mean(byCylinder$'4'[, 1])
4cyl <- mean(byCylinder$'4'[, 1])
fourCyl <- mean(byCylinder$'4'[, 1])
eightCyl <- mean(byCylinders'8'[, 1])
eightCyl <- mean(byCylinders$'8'[, 1])
eightCyl <- mean(byCylinder$'8'[, 1])
eightCyl
fourCyl - eightCyl
byCylinder$'8'
debug(ls)
?ls
library(dataset)
library(datasets)
iris
splitIris <- split(iris, iris$species)
splitIris <- split(iris, iris$Species)
splitIris
vIris <- splitIris$virginica
vIris
vIris
mean(vIris$Sepal.Length)
applis(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
sapply(split(mtcars$mpt, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
myAvg <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
class(mAvg)
class(myAvg)
myAvg
str(myAvg)
myAvg$4 - myAvg$8
myAvg$"4" - myAvg$"8"
myAvg[1] - myAvg[3]
myHP <- sapply(split(mtcars$hp, mtcars$cyl), mean)
myHP
myAvg <- myHP[8] - myHp[4]
myHP
myAvg <- myHP[8] - myHP[4]
myAvg
myHP[8]
myAvg <- myHP[3] - myHP[1]
myAvg
help("<<-")
mvFunction <- makevector(c(1,3,5))
mvFunction <- makeVector(c(1,3,5))
ls(makeVector)
makeVector
ls(environment(makeVector))
source('~/.active-rstudio-document')
#mvFunction <- makeVector(c(1,3,5))
ls(environment(makeVector))
ls(environment())
makeVector(c(1,3,5))
mvFunction <- (c(1,3,5))
mvFunction <- makeVector()
mvFunction
mvFunction.set(c(1,3,5))
aVector <- makeVector(c(1,3,5))
aVector
m <- numeric()
m
m <- c(1,3,5)
m
class(m)
makeVector()
m
library(swirl)
ls()
rm(list=ls())
swirl()
lapply(c(1,3,5), makeVector)
source('~/.active-rstudio-document')
lapply(c(1,3,5), makeVector)
m
numVector < c(1,3,5)
numVector <- c(1,3,5)
class(numVector)
makeVector(numVector)
m
m <- numeric()
m
makeVector(numVector)
m
makeVector$set
makeVector.set
makeVector
makeVector
foo <makeVector$set()
foo <- makeVector$set()
class(makeVector)
makeVector
makeVector(c(1,3,5))
a <- makeVector(c(1,3,5))
a
as.list(environment(a))
as.list(a)
new_counter <- function() {
i <- 0
function() {
i <<- i + 1
i
}
}
counter_one <- new_counter()
counter_two <- new_counter()
counter_one()
counter_one()
counter_two()
i <- 0
new_counter2 <- function() {
i <<- i + 1
i
}
new_counter3 <- function() {
i <- 0
function() {
i <- i + 1
i
}
}
new_counter2()
new_counter2()
new_counter2()
new_counter3()
new_counter3()
new_counter3()
makeVector
class(makeVector)
makeVector
source('~/.active-rstudio-document')
makeVector
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f1
install.packages("pyre")
formals(makeVector)
makeVector
class(makeVector)
formals(makeVector)
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x, g)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
l <- function(x) x + 1
m <- function() {
l <- function(x) x * 2
l(10)
}
m()
#> [1] 20
rm(l, m)
l <- function(x) x + 1
m <- function() {
l <- function(x) x * 2
l(10)
}
m()
#> [1] 20
rm(l, m)
x
findGlobals(makeVector)
codetools::findGlobals(makeVector)
c <- 10
c(c = c)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x ^ 2
}
f(x) + 1
}
f(x) * 2
}
f(10)
x <- 10; y <- 5
x+y
'+'(x,y)
aList <- list(1,2,3)
class(aList)
aList
class(aList[1])
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
df$e[df$e == -99] <- NA
df
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
fix_missing <- function () {}
fix_missing <- function () {}
fix_missing <- function () { x[x== -99] <-NA
makeVector
makeVector
source('~/.active-rstudio-document')
makeVector
class(makeVector)
makeVector()
class(makeVector)
source('~/.active-rstudio-document')
myFun <- makeVector()
myFun
getmean <- function() m
makeVector
set.seed(1)
rpois(5,2)
foo <- rpois(5,2)
class(foo)
foo <- rpois(5,2)
foo
set.seed(1)
rpois(5,2)
?pnorm
?ppois
?dpois
?rpois
set.seed(10)
x <- rep(0:1, each=5)
x
e <- rnorm(10,0,20)
e
?rnorm
y <- 0.5 + 2* x + e
y
?binom
?rbinom
set.seed(1)
rpois(5,2)
?write.table
setwd("~/Documents")
setwd("~/Documents/DataSciences/CleaningDataProject")
source('~/Documents/DataSciences/CleaningDataProject/run_analysis.R')
run_analysis()
nn
source('~/Documents/DataSciences/CleaningDataProject/run_analysis.R')
run_analysis()
library(dplyr)
run_analysis()
